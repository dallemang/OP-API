# baseURI: http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS
# imports: http://topbraid.org/sparqlmotionfunctions
# imports: http://topbraid.org/sparqlmotionlib-tbc
# imports: http://www.w3.org/2004/02/skos/core
# imports: http://www.workingontologist.org/OpenPHACTS/keys/keymodel

@prefix :        <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#> .
@prefix APIspec:  <http://www.workingontologist.org/OpenPHACTS/scripts/APIspec#> .
@prefix OP:      <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#> .
@prefix arg:     <http://spinrdf.org/arg#> .
@prefix keymodel:  <http://www.workingontologist.org/OpenPHACTS/keys/keymodel#> .
@prefix ops_api:  <http://www.openphacts.org/api#> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm:      <http://topbraid.org/sparqlmotion#> .
@prefix smf:     <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml:     <http://topbraid.org/sparqlmotionlib#> .
@prefix sp:      <http://spinrdf.org/sp#> .
@prefix spin:    <http://spinrdf.org/spin#> .
@prefix spl:     <http://spinrdf.org/spl#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

arg:URL
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:_callback
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:_page
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:_pageSize
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:act_type
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:activity_type
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:activity_unit
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:activity_value
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:app_ids
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:app_keys
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:assay_organism
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:branch
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#commonOptions.Complexity>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#commonOptions.HasPatents>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#commonOptions.HasSpectra>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#commonOptions.Isotopic>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:inchi
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:inchi_key
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:limit
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:maxEx_activity_value
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:max_activity_value
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:minEx_activity_value
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:min_activity_value
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:q
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#resultOptions.Length>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#resultOptions.Limit>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#resultOptions.Start>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#searchOptions.MatchTautomers>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#searchOptions.MatchType>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#searchOptions.Molecule>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#searchOptions.SimilarityType>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://spinrdf.org/arg#searchOptions.Threshold>
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:smiles
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:targetURISpace
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:target_organism
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:uri
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

arg:uuid
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS>
      rdf:type owl:Ontology ;
      owl:imports <http://topbraid.org/sparqlmotionfunctions> , <http://topbraid.org/sparqlmotionlib-tbc> , <http://www.w3.org/2004/02/skos/core> , <http://www.workingontologist.org/OpenPHACTS/keys/keymodel> ;
      owl:versionInfo "Created with TopBraid Composer"^^xsd:string .

OP:Bind-compound
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-members
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-members-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-members-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-members-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-members-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-node
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-node-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-node-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-node-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-node-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-target_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "target_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "target_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "target_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "target_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "target_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-count-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-_page
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_pagearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_page"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_page={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_page"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_pagearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-_pageSize
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_pageSizearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_pageSize"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_pageSize={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_pageSize"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_pageSizearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-target_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "target_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "target_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "target_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "target_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "target_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-pages-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-pharmacology-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-root
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-root ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-root-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-root ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-root-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-root ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-chebi-root-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-chebi-root ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-target_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "target_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "target_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "target_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "target_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "target_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-count-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-_page
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_pagearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_page"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_page={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_page"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_pagearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-_pageSize
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_pageSizearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_pageSize"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_pageSize={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_pageSize"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_pageSizearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-target_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "target_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "target_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "target_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "target_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "target_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-pages-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-pharmacology-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-compound-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-compound ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-getConceptDescription
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-getConceptDescription ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-getConceptDescription-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-getConceptDescription ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-getConceptDescription-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-getConceptDescription ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-getConceptDescription-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-getConceptDescription ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-getConceptDescription-branch
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-getConceptDescription ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "brancharg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "branch"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "branch={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "branch"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "brancharg"
                                    ]
                          ])
              ] .

OP:Bind-getConceptDescription-uuid
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-getConceptDescription ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uuidarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uuid"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uuid={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uuid"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uuidarg"
                                    ]
                          ])
              ] .

OP:Bind-mapURL
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-mapURL ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-mapURL-URL
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-mapURL ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "URLarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "URL"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "URL={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "URL"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "URLarg"
                                    ]
                          ])
              ] .

OP:Bind-mapURL-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-mapURL ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-mapURL-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-mapURL ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-mapURL-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-mapURL ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-mapURL-targetURISpace
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-mapURL ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "targetURISpacearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "targetURISpace"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "targetURISpace={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "targetURISpace"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "targetURISpacearg"
                                    ]
                          ])
              ] .

OP:Bind-pathway
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pathway ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-pathway-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pathway ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-pathway-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pathway ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-pathway-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pathway ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-pathway-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pathway ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-activities
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-activities ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-activities-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-activities ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-activities-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-activities ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-activities-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-activities ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-units-act_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-units-act_type ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-units-act_type-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-units-act_type ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-units-act_type-act_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-units-act_type ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "act_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "act_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "act_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "act_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "act_typearg"
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-units-act_type-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-units-act_type ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-pharmacology-filters-units-act_type-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-pharmacology-filters-units-act_type ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-search-byTag
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-byTag ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-search-byTag-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-byTag ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-search-byTag-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-byTag ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-search-byTag-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-byTag ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-search-byTag-branch
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-byTag ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "brancharg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "branch"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "branch={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "branch"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "brancharg"
                                    ]
                          ])
              ] .

OP:Bind-search-byTag-limit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-byTag ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "limitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "limit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "limit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "limit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "limitarg"
                                    ]
                          ])
              ] .

OP:Bind-search-byTag-q
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-byTag ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "qarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "q"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "q={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "q"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "qarg"
                                    ]
                          ])
              ] .

OP:Bind-search-byTag-uuid
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-byTag ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uuidarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uuid"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uuid={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uuid"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uuidarg"
                                    ]
                          ])
              ] .

OP:Bind-search-freetext
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-freetext ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-search-freetext-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-freetext ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-search-freetext-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-freetext ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-search-freetext-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-freetext ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-search-freetext-branch
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-freetext ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "brancharg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "branch"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "branch={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "branch"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "brancharg"
                                    ]
                          ])
              ] .

OP:Bind-search-freetext-limit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-freetext ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "limitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "limit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "limit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "limit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "limitarg"
                                    ]
                          ])
              ] .

OP:Bind-search-freetext-q
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-search-freetext ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "qarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "q"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "q={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "q"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "qarg"
                                    ]
                          ])
              ] .

OP:Bind-sources
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-sources ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-sources-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-sources ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-sources-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-sources ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-sources-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-sources ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-structure
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-structure-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-exact
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-structure-exact-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-exact-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-exact-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-commonOptions.Complexity>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.Complexityarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.Complexity"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.Complexity={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.Complexity"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.Complexityarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-commonOptions.HasPatents>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.HasPatentsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.HasPatents"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.HasPatents={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.HasPatents"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.HasPatentsarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-commonOptions.HasSpectra>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.HasSpectraarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.HasSpectra"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.HasSpectra={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.HasSpectra"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.HasSpectraarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-commonOptions.Isotopic>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.Isotopicarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.Isotopic"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.Isotopic={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.Isotopic"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.Isotopicarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-resultOptions.Length>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Lengtharg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Length"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Length={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Length"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Lengtharg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-resultOptions.Limit>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Limitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Limit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Limit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Limit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Limitarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-resultOptions.Start>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Startarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Start"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Start={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Start"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Startarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-searchOptions.MatchType>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "searchOptions.MatchTypearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "searchOptions.MatchType"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "searchOptions.MatchType={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "searchOptions.MatchType"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "searchOptions.MatchTypearg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-searchOptions.Molecule>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-exact ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "searchOptions.Moleculearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "searchOptions.Molecule"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "searchOptions.Molecule={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "searchOptions.Molecule"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "searchOptions.Moleculearg"
                                    ]
                          ])
              ] .

OP:Bind-structure-inchi
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "inchiarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "inchi"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "inchi={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "inchi"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "inchiarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-inchi_key
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "inchi_keyarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "inchi_key"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "inchi_key={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "inchi_key"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "inchi_keyarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-similarity
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-structure-similarity-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-similarity-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-similarity-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-commonOptions.Complexity>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.Complexityarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.Complexity"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.Complexity={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.Complexity"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.Complexityarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-commonOptions.HasPatents>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.HasPatentsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.HasPatents"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.HasPatents={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.HasPatents"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.HasPatentsarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-commonOptions.HasSpectra>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.HasSpectraarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.HasSpectra"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.HasSpectra={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.HasSpectra"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.HasSpectraarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-commonOptions.Isotopic>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.Isotopicarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.Isotopic"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.Isotopic={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.Isotopic"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.Isotopicarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-resultOptions.Length>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Lengtharg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Length"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Length={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Length"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Lengtharg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-resultOptions.Limit>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Limitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Limit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Limit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Limit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Limitarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-resultOptions.Start>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Startarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Start"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Start={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Start"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Startarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-searchOptions.Molecule>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "searchOptions.Moleculearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "searchOptions.Molecule"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "searchOptions.Molecule={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "searchOptions.Molecule"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "searchOptions.Moleculearg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-searchOptions.SimilarityType>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "searchOptions.SimilarityTypearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "searchOptions.SimilarityType"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "searchOptions.SimilarityType={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "searchOptions.SimilarityType"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "searchOptions.SimilarityTypearg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-searchOptions.Threshold>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-similarity ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "searchOptions.Thresholdarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "searchOptions.Threshold"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "searchOptions.Threshold={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "searchOptions.Threshold"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "searchOptions.Thresholdarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-smiles
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "smilesarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "smiles"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "smiles={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "smiles"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "smilesarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-substructure
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-structure-substructure-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-substructure-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-structure-substructure-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-commonOptions.Complexity>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.Complexityarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.Complexity"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.Complexity={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.Complexity"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.Complexityarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-commonOptions.HasPatents>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.HasPatentsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.HasPatents"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.HasPatents={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.HasPatents"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.HasPatentsarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-commonOptions.HasSpectra>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.HasSpectraarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.HasSpectra"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.HasSpectra={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.HasSpectra"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.HasSpectraarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-commonOptions.Isotopic>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "commonOptions.Isotopicarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "commonOptions.Isotopic"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "commonOptions.Isotopic={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "commonOptions.Isotopic"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "commonOptions.Isotopicarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-resultOptions.Length>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Lengtharg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Length"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Length={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Length"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Lengtharg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-resultOptions.Limit>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Limitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Limit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Limit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Limit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Limitarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-resultOptions.Start>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "resultOptions.Startarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "resultOptions.Start"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "resultOptions.Start={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "resultOptions.Start"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "resultOptions.Startarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-searchOptions.MatchTautomers>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "searchOptions.MatchTautomersarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "searchOptions.MatchTautomers"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "searchOptions.MatchTautomers={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "searchOptions.MatchTautomers"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "searchOptions.MatchTautomersarg"
                                    ]
                          ])
              ] .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-searchOptions.Molecule>
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-structure-substructure ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "searchOptions.Moleculearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "searchOptions.Molecule"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "searchOptions.Molecule={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "searchOptions.Molecule"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "searchOptions.Moleculearg"
                                    ]
                          ])
              ] .

OP:Bind-target
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-members
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-members-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-members-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-members-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-members-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-members ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-node
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-node-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-node-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-node-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-node-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-node ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-target_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "target_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "target_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "target_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "target_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "target_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-count-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-_page
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_pagearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_page"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_page={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_page"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_pagearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-_pageSize
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_pageSizearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_pageSize"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_pageSize={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_pageSize"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_pageSizearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-target_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "target_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "target_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "target_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "target_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "target_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-pages-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-pharmacology-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-root
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-root ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-root-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-root ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-root-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-root ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-enzyme-root-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-enzyme-root ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-target_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "target_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "target_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "target_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "target_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "target_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-count-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-count ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "id"^^xsd:string
                          ] [ sp:varName "key"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "id"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:id ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "key"^^xsd:string
                                    ] ;
                            sp:predicate keymodel:key ;
                            sp:subject
                                    [ sp:varName "?0"^^xsd:string
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-_callback
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_callbackarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_callback={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_callback"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_callbackarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-_page
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_pagearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_page"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_page={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_page"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_pagearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-_pageSize
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "_pageSizearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "_pageSize"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "_pageSize={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "_pageSize"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "_pageSizearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-activity_type
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_typearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_type"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_type={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_type"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_typearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-activity_unit
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_unitarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_unit"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_unit={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_unit"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_unitarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-app_ids
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_idsarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_ids={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_ids"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_idsarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-app_keys
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "app_keysarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "app_keys={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "app_keys"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "app_keysarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-assay_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "assay_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "assay_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "assay_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "assay_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "assay_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-maxEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "maxEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "maxEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "maxEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "maxEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "maxEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-max_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "max_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "max_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "max-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "max_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "max_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-minEx_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "minEx_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "minEx_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "minEx-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "minEx_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "minEx_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-min_activity_value
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "min_activity_valuearg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "min_activity_value"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "min-activity_value={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "min_activity_value"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "min_activity_valuearg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-target_organism
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "target_organismarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "target_organism"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "target_organism={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "target_organism"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "target_organismarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-pages-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology-pages ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-target-pharmacology-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target-pharmacology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ sp:varName "uri"
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"
                                    ]
                          ])
              ] .

OP:Bind-target-uri
      rdf:type sml:BindBySelect ;
      sm:next OP:Import-target ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "uriarg"^^xsd:string
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type sp:bound ;
                                                sp:arg1 [ sp:varName "uri"^^xsd:string
                                                        ]
                                              ] ;
                                      sp:arg2 [ rdf:type smf:buildString ;
                                                sp:arg1 "uri={?1}" ;
                                                sp:arg2 [ rdf:type smf:encodeURL ;
                                                          sp:arg1 [ rdf:type xsd:string ;
                                                                    sp:arg1 [ sp:varName "uri"^^xsd:string
                                                                            ]
                                                                  ]
                                                        ]
                                              ] ;
                                      sp:arg3 ""
                                    ] ;
                            sp:variable
                                    [ sp:varName "uriarg"^^xsd:string
                                    ]
                          ])
              ] .

OP:Import-compound
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound?" ;
      sm:next OP:Return-compound ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound?app_id={?id}&app_key={?key}&{?app_idsarg}&{?_callbackarg}&{?app_keysarg}&{?uriarg}"
              ] .

OP:Import-compound-chebi-members
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/chebi/members?" ;
      sm:next OP:Return-compound-chebi-members ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/chebi/members?app_id={?id}&app_key={?key}&{?app_keysarg}&{?uriarg}&{?app_idsarg}&{?_callbackarg}"
              ] .

OP:Import-compound-chebi-node
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/chebi/node?" ;
      sm:next OP:Return-compound-chebi-node ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/chebi/node?app_id={?id}&app_key={?key}&{?_callbackarg}&{?uriarg}&{?app_keysarg}&{?app_idsarg}"
              ] .

OP:Import-compound-chebi-pharmacology
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/chebi/pharmacology?" ;
      sm:next OP:Return-compound-chebi-pharmacology ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/chebi/pharmacology?app_id={?id}&app_key={?key}&{?assay_organismarg}&{?min_activity_valuearg}&{?app_idsarg}&{?minEx_activity_valuearg}&{?max_activity_valuearg}&{?app_keysarg}&{?_callbackarg}&{?uriarg}&{?activity_valuearg}&{?activity_unitarg}&{?activity_typearg}&{?maxEx_activity_valuearg}"
              ] .

OP:Import-compound-chebi-pharmacology-count
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/chebi/pharmacology/count?" ;
      sm:next OP:Return-compound-chebi-pharmacology-count ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/chebi/pharmacology/count?app_id={?id}&app_key={?key}&{?app_idsarg}&{?maxEx_activity_valuearg}&{?uriarg}&{?activity_valuearg}&{?activity_unitarg}&{?assay_organismarg}&{?app_keysarg}&{?max_activity_valuearg}&{?min_activity_valuearg}&{?target_organismarg}&{?activity_typearg}&{?minEx_activity_valuearg}&{?_callbackarg}"
              ] .

OP:Import-compound-chebi-pharmacology-pages
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/chebi/pharmacology/pages?" ;
      sm:next OP:Return-compound-chebi-pharmacology-pages ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/chebi/pharmacology/pages?app_id={?id}&app_key={?key}&{?app_idsarg}&{?uriarg}&{?target_organismarg}&{?minEx_activity_valuearg}&{?_pagearg}&{?app_keysarg}&{?activity_unitarg}&{?_callbackarg}&{?maxEx_activity_valuearg}&{?max_activity_valuearg}&{?activity_typearg}&{?activity_valuearg}&{?_pageSizearg}&{?assay_organismarg}&{?min_activity_valuearg}"
              ] .

OP:Import-compound-chebi-root
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/chebi/root?" ;
      sm:next OP:Return-compound-chebi-root ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/chebi/root?app_id={?id}&app_key={?key}&{?app_idsarg}&{?_callbackarg}&{?app_keysarg}"
              ] .

OP:Import-compound-pharmacology
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/pharmacology?" ;
      sm:next OP:Return-compound-pharmacology ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/pharmacology?app_id={?id}&app_key={?key}&{?min_activity_valuearg}&{?assay_organismarg}&{?activity_valuearg}&{?maxEx_activity_valuearg}&{?minEx_activity_valuearg}&{?activity_unitarg}&{?app_idsarg}&{?uriarg}&{?_callbackarg}&{?max_activity_valuearg}&{?activity_typearg}&{?app_keysarg}"
              ] .

OP:Import-compound-pharmacology-count
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/pharmacology/count?" ;
      sm:next OP:Return-compound-pharmacology-count ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/pharmacology/count?app_id={?id}&app_key={?key}&{?maxEx_activity_valuearg}&{?activity_unitarg}&{?min_activity_valuearg}&{?app_idsarg}&{?minEx_activity_valuearg}&{?_callbackarg}&{?app_keysarg}&{?uriarg}&{?assay_organismarg}&{?target_organismarg}&{?activity_typearg}&{?max_activity_valuearg}&{?activity_valuearg}"
              ] .

OP:Import-compound-pharmacology-pages
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/compound/pharmacology/pages?" ;
      sm:next OP:Return-compound-pharmacology-pages ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/compound/pharmacology/pages?app_id={?id}&app_key={?key}&{?min_activity_valuearg}&{?maxEx_activity_valuearg}&{?target_organismarg}&{?_pageSizearg}&{?assay_organismarg}&{?activity_typearg}&{?app_keysarg}&{?minEx_activity_valuearg}&{?activity_valuearg}&{?app_idsarg}&{?_pagearg}&{?_callbackarg}&{?uriarg}&{?activity_unitarg}&{?max_activity_valuearg}"
              ] .

OP:Import-getConceptDescription
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/getConceptDescription?" ;
      sm:next OP:Return-getConceptDescription ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/getConceptDescription?app_id={?id}&app_key={?key}&{?_callbackarg}&{?app_idsarg}&{?brancharg}&{?uuidarg}&{?app_keysarg}"
              ] .

OP:Import-mapURL
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/mapURL?" ;
      sm:next OP:Return-mapURL ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/mapURL?app_id={?id}&app_key={?key}&{?_callbackarg}&{?URLarg}&{?app_idsarg}&{?app_keysarg}&{?targetURISpacearg}"
              ] .

OP:Import-pathway
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/pathway?" ;
      sm:next OP:Return-pathway ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/pathway?app_id={?id}&app_key={?key}&{?uriarg}&{?app_keysarg}&{?_callbackarg}&{?app_idsarg}"
              ] .

OP:Import-pharmacology-filters-activities
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/pharmacology/filters/activities?" ;
      sm:next OP:Return-pharmacology-filters-activities ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/pharmacology/filters/activities?app_id={?id}&app_key={?key}&{?_callbackarg}&{?app_keysarg}&{?app_idsarg}"
              ] .

OP:Import-pharmacology-filters-units-act_type
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/pharmacology/filters/units/{act_type}?" ;
      sm:next OP:Return-pharmacology-filters-units-act_type ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/pharmacology/filters/units/{act_type}?app_id={?id}&app_key={?key}&{?app_idsarg}&{?app_keysarg}&{?act_typearg}&{?_callbackarg}"
              ] .

OP:Import-search-byTag
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/search/byTag?" ;
      sm:next OP:Return-search-byTag ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/search/byTag?app_id={?id}&app_key={?key}&{?app_idsarg}&{?limitarg}&{?qarg}&{?app_keysarg}&{?brancharg}&{?uuidarg}&{?_callbackarg}"
              ] .

OP:Import-search-freetext
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/search/freetext?" ;
      sm:next OP:Return-search-freetext ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/search/freetext?app_id={?id}&app_key={?key}&{?app_keysarg}&{?app_idsarg}&{?brancharg}&{?_callbackarg}&{?limitarg}&{?qarg}"
              ] .

OP:Import-sources
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/sources?" ;
      sm:next OP:Return-sources ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/sources?app_id={?id}&app_key={?key}&{?app_keysarg}&{?_callbackarg}&{?app_idsarg}"
              ] .

OP:Import-structure
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/structure?" ;
      sm:next OP:Return-structure ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/structure?app_id={?id}&app_key={?key}&{?inchi_keyarg}&{?_callbackarg}&{?app_keysarg}&{?inchiarg}&{?app_idsarg}&{?smilesarg}"
              ] .

OP:Import-structure-exact
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/structure/exact?" ;
      sm:next OP:Return-structure-exact ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/structure/exact?app_id={?id}&app_key={?key}&{?_callbackarg}&{?commonOptions.Isotopicarg}&{?resultOptions.Limitarg}&{?commonOptions.HasPatentsarg}&{?app_idsarg}&{?resultOptions.Lengtharg}&{?searchOptions.MatchTypearg}&{?app_keysarg}&{?commonOptions.HasSpectraarg}&{?searchOptions.Moleculearg}&{?commonOptions.Complexityarg}&{?resultOptions.Startarg}"
              ] .

OP:Import-structure-similarity
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/structure/similarity?" ;
      sm:next OP:Return-structure-similarity ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/structure/similarity?app_id={?id}&app_key={?key}&{?app_keysarg}&{?searchOptions.Moleculearg}&{?commonOptions.HasPatentsarg}&{?searchOptions.SimilarityTypearg}&{?app_idsarg}&{?commonOptions.HasSpectraarg}&{?_callbackarg}&{?commonOptions.Isotopicarg}&{?searchOptions.Thresholdarg}&{?resultOptions.Lengtharg}&{?commonOptions.Complexityarg}&{?resultOptions.Startarg}&{?resultOptions.Limitarg}"
              ] .

OP:Import-structure-substructure
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/structure/substructure?" ;
      sm:next OP:Return-structure-substructure ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/structure/substructure?app_id={?id}&app_key={?key}&{?commonOptions.Complexityarg}&{?commonOptions.Isotopicarg}&{?searchOptions.MatchTautomersarg}&{?resultOptions.Limitarg}&{?commonOptions.HasPatentsarg}&{?_callbackarg}&{?commonOptions.HasSpectraarg}&{?searchOptions.Moleculearg}&{?app_idsarg}&{?resultOptions.Startarg}&{?app_keysarg}&{?resultOptions.Lengtharg}"
              ] .

OP:Import-target
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target?" ;
      sm:next OP:Return-target ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target?app_id={?id}&app_key={?key}&{?app_keysarg}&{?_callbackarg}&{?app_idsarg}&{?uriarg}"
              ] .

OP:Import-target-enzyme-members
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/enzyme/members?" ;
      sm:next OP:Return-target-enzyme-members ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/enzyme/members?app_id={?id}&app_key={?key}&{?app_keysarg}&{?uriarg}&{?_callbackarg}&{?app_idsarg}"
              ] .

OP:Import-target-enzyme-node
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/enzyme/node?" ;
      sm:next OP:Return-target-enzyme-node ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/enzyme/node?app_id={?id}&app_key={?key}&{?uriarg}&{?_callbackarg}&{?app_idsarg}&{?app_keysarg}"
              ] .

OP:Import-target-enzyme-pharmacology
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/enzyme/pharmacology?" ;
      sm:next OP:Return-target-enzyme-pharmacology ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/enzyme/pharmacology?app_id={?id}&app_key={?key}&{?assay_organismarg}&{?activity_valuearg}&{?_callbackarg}&{?max_activity_valuearg}&{?activity_unitarg}&{?uriarg}&{?maxEx_activity_valuearg}&{?app_idsarg}&{?app_keysarg}&{?activity_typearg}&{?minEx_activity_valuearg}&{?min_activity_valuearg}"
              ] .

OP:Import-target-enzyme-pharmacology-count
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/enzyme/pharmacology/count?" ;
      sm:next OP:Return-target-enzyme-pharmacology-count ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/enzyme/pharmacology/count?app_id={?id}&app_key={?key}&{?_callbackarg}&{?assay_organismarg}&{?min_activity_valuearg}&{?app_idsarg}&{?activity_typearg}&{?uriarg}&{?app_keysarg}&{?max_activity_valuearg}&{?maxEx_activity_valuearg}&{?activity_unitarg}&{?target_organismarg}&{?activity_valuearg}&{?minEx_activity_valuearg}"
              ] .

OP:Import-target-enzyme-pharmacology-pages
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/enzyme/pharmacology/pages?" ;
      sm:next OP:Return-target-enzyme-pharmacology-pages ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/enzyme/pharmacology/pages?app_id={?id}&app_key={?key}&{?assay_organismarg}&{?uriarg}&{?activity_valuearg}&{?min_activity_valuearg}&{?app_idsarg}&{?_callbackarg}&{?max_activity_valuearg}&{?_pagearg}&{?maxEx_activity_valuearg}&{?minEx_activity_valuearg}&{?activity_typearg}&{?target_organismarg}&{?activity_unitarg}&{?_pageSizearg}&{?app_keysarg}"
              ] .

OP:Import-target-enzyme-root
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/enzyme/root?" ;
      sm:next OP:Return-target-enzyme-root ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/enzyme/root?app_id={?id}&app_key={?key}&{?app_keysarg}&{?app_idsarg}&{?_callbackarg}"
              ] .

OP:Import-target-pharmacology
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/pharmacology?" ;
      sm:next OP:Return-target-pharmacology ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/pharmacology?app_id={?id}&app_key={?key}&{?activity_unitarg}&{?activity_typearg}&{?min_activity_valuearg}&{?max_activity_valuearg}&{?app_idsarg}&{?assay_organismarg}&{?activity_valuearg}&{?minEx_activity_valuearg}&{?_callbackarg}&{?maxEx_activity_valuearg}&{?app_keysarg}&{?uriarg}"
              ] .

OP:Import-target-pharmacology-count
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/pharmacology/count?" ;
      sm:next OP:Return-target-pharmacology-count ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/pharmacology/count?app_id={?id}&app_key={?key}&{?app_idsarg}&{?activity_unitarg}&{?activity_typearg}&{?app_keysarg}&{?_callbackarg}&{?max_activity_valuearg}&{?maxEx_activity_valuearg}&{?assay_organismarg}&{?min_activity_valuearg}&{?target_organismarg}&{?activity_valuearg}&{?minEx_activity_valuearg}&{?uriarg}"
              ] .

OP:Import-target-pharmacology-pages
      rdf:type sml:ImportRDFFromURL ;
      sp:call "https://beta.openphacts.org/target/pharmacology/pages?" ;
      sm:next OP:Return-target-pharmacology-pages ;
      sml:url [ rdf:type smf:buildString ;
                sp:arg1 "https://beta.openphacts.org/target/pharmacology/pages?app_id={?id}&app_key={?key}&{?app_idsarg}&{?min_activity_valuearg}&{?target_organismarg}&{?_pageSizearg}&{?minEx_activity_valuearg}&{?maxEx_activity_valuearg}&{?app_keysarg}&{?_pagearg}&{?uriarg}&{?activity_valuearg}&{?_callbackarg}&{?activity_unitarg}&{?assay_organismarg}&{?max_activity_valuearg}&{?activity_typearg}"
              ] .

OP:Return-compound
      rdf:type sml:ReturnRDF .

OP:Return-compound-chebi-members
      rdf:type sml:ReturnRDF .

OP:Return-compound-chebi-node
      rdf:type sml:ReturnRDF .

OP:Return-compound-chebi-pharmacology
      rdf:type sml:ReturnRDF .

OP:Return-compound-chebi-pharmacology-count
      rdf:type sml:ReturnRDF .

OP:Return-compound-chebi-pharmacology-pages
      rdf:type sml:ReturnRDF .

OP:Return-compound-chebi-root
      rdf:type sml:ReturnRDF .

OP:Return-compound-pharmacology
      rdf:type sml:ReturnRDF .

OP:Return-compound-pharmacology-count
      rdf:type sml:ReturnRDF .

OP:Return-compound-pharmacology-pages
      rdf:type sml:ReturnRDF .

OP:Return-getConceptDescription
      rdf:type sml:ReturnRDF .

OP:Return-mapURL
      rdf:type sml:ReturnRDF .

OP:Return-pathway
      rdf:type sml:ReturnRDF .

OP:Return-pharmacology-filters-activities
      rdf:type sml:ReturnRDF .

OP:Return-pharmacology-filters-units-act_type
      rdf:type sml:ReturnRDF .

OP:Return-search-byTag
      rdf:type sml:ReturnRDF .

OP:Return-search-freetext
      rdf:type sml:ReturnRDF .

OP:Return-sources
      rdf:type sml:ReturnRDF .

OP:Return-structure
      rdf:type sml:ReturnRDF .

OP:Return-structure-exact
      rdf:type sml:ReturnRDF .

OP:Return-structure-similarity
      rdf:type sml:ReturnRDF .

OP:Return-structure-substructure
      rdf:type sml:ReturnRDF .

OP:Return-target
      rdf:type sml:ReturnRDF .

OP:Return-target-enzyme-members
      rdf:type sml:ReturnRDF .

OP:Return-target-enzyme-node
      rdf:type sml:ReturnRDF .

OP:Return-target-enzyme-pharmacology
      rdf:type sml:ReturnRDF .

OP:Return-target-enzyme-pharmacology-count
      rdf:type sml:ReturnRDF .

OP:Return-target-enzyme-pharmacology-pages
      rdf:type sml:ReturnRDF .

OP:Return-target-enzyme-root
      rdf:type sml:ReturnRDF .

OP:Return-target-pharmacology
      rdf:type sml:ReturnRDF .

OP:Return-target-pharmacology-count
      rdf:type sml:ReturnRDF .

OP:Return-target-pharmacology-pages
      rdf:type sml:ReturnRDF .

OP:WS-compound
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-chebi-members
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-chebi-members ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-chebi-node
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-chebi-node ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-chebi-pharmacology
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-chebi-pharmacology ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-chebi-pharmacology-count
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-chebi-pharmacology-count ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-chebi-pharmacology-pages
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-chebi-root
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-chebi-root ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-pharmacology
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-pharmacology ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-pharmacology-count
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-pharmacology-count ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-compound-pharmacology-pages
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-compound-pharmacology-pages ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-getConceptDescription
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-getConceptDescription ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-mapURL
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-mapURL ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-pathway
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-pathway ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-pharmacology-filters-activities
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-pharmacology-filters-activities ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-pharmacology-filters-units-act_type
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-pharmacology-filters-units-act_type ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-search-byTag
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-search-byTag ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-search-freetext
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-search-freetext ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-sources
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-sources ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-structure
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-structure ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-structure-exact
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-structure-exact ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-structure-similarity
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-structure-similarity ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-structure-substructure
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-structure-substructure ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-enzyme-members
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-enzyme-members ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-enzyme-node
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-enzyme-node ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-enzyme-pharmacology
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-enzyme-pharmacology ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-enzyme-pharmacology-count
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-enzyme-pharmacology-count ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-enzyme-pharmacology-pages
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-enzyme-root
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-enzyme-root ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-pharmacology
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-pharmacology ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-pharmacology-count
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-pharmacology-count ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:WS-target-pharmacology-pages
      rdf:type sml:ImportRDFFromWorkspace ;
      sm:next OP:Bind-target-pharmacology-pages ;
      sml:baseURI "http://www.workingontologist.org/OpenPHACTS/keys/Dean.key" .

OP:compound
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-app_ids , OP:compound-uri , OP:compound-app_keys , OP:compound-_callback ;
      sm:returnModule OP:Return-compound .

OP:compound-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-_callback .

OP:compound-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-app_ids .

OP:compound-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-app_keys .

OP:compound-chebi-members
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-chebi-members-_callback , OP:compound-chebi-members-app_keys , OP:compound-chebi-members-app_ids , OP:compound-chebi-members-uri ;
      sm:returnModule OP:Return-compound-chebi-members .

OP:compound-chebi-members-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-members-_callback .

OP:compound-chebi-members-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-members-app_ids .

OP:compound-chebi-members-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-members-app_keys .

OP:compound-chebi-members-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-members-uri .

OP:compound-chebi-node
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-chebi-node-_callback , OP:compound-chebi-node-app_keys , OP:compound-chebi-node-app_ids , OP:compound-chebi-node-uri ;
      sm:returnModule OP:Return-compound-chebi-node .

OP:compound-chebi-node-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-node-_callback .

OP:compound-chebi-node-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-node-app_ids .

OP:compound-chebi-node-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-node-app_keys .

OP:compound-chebi-node-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-node-uri .

OP:compound-chebi-pharmacology
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-chebi-pharmacology-app_ids , OP:compound-chebi-pharmacology-assay_organism , OP:compound-chebi-pharmacology-maxEx_activity_value , OP:compound-chebi-pharmacology-activity_type , OP:compound-chebi-pharmacology-max_activity_value , OP:compound-chebi-pharmacology-activity_unit , OP:compound-chebi-pharmacology-uri , OP:compound-chebi-pharmacology-activity_value , OP:compound-chebi-pharmacology-minEx_activity_value , OP:compound-chebi-pharmacology-app_keys , OP:compound-chebi-pharmacology-min_activity_value , OP:compound-chebi-pharmacology-_callback ;
      sm:returnModule OP:Return-compound-chebi-pharmacology .

OP:compound-chebi-pharmacology-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-_callback .

OP:compound-chebi-pharmacology-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-activity_type .

OP:compound-chebi-pharmacology-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-activity_unit .

OP:compound-chebi-pharmacology-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-activity_value .

OP:compound-chebi-pharmacology-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-app_ids .

OP:compound-chebi-pharmacology-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-app_keys .

OP:compound-chebi-pharmacology-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-assay_organism .

OP:compound-chebi-pharmacology-count
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-chebi-pharmacology-count-max_activity_value , OP:compound-chebi-pharmacology-count-maxEx_activity_value , OP:compound-chebi-pharmacology-count-activity_type , OP:compound-chebi-pharmacology-count-uri , OP:compound-chebi-pharmacology-count-target_organism , OP:compound-chebi-pharmacology-count-app_keys , OP:compound-chebi-pharmacology-count-activity_value , OP:compound-chebi-pharmacology-count-min_activity_value , OP:compound-chebi-pharmacology-count-activity_unit , OP:compound-chebi-pharmacology-count-_callback , OP:compound-chebi-pharmacology-count-minEx_activity_value , OP:compound-chebi-pharmacology-count-app_ids , OP:compound-chebi-pharmacology-count-assay_organism ;
      sm:returnModule OP:Return-compound-chebi-pharmacology-count .

OP:compound-chebi-pharmacology-count-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-_callback .

OP:compound-chebi-pharmacology-count-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-activity_type .

OP:compound-chebi-pharmacology-count-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-activity_unit .

OP:compound-chebi-pharmacology-count-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-activity_value .

OP:compound-chebi-pharmacology-count-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-app_ids .

OP:compound-chebi-pharmacology-count-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-app_keys .

OP:compound-chebi-pharmacology-count-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-assay_organism .

OP:compound-chebi-pharmacology-count-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-maxEx_activity_value .

OP:compound-chebi-pharmacology-count-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-max_activity_value .

OP:compound-chebi-pharmacology-count-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-minEx_activity_value .

OP:compound-chebi-pharmacology-count-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-min_activity_value .

OP:compound-chebi-pharmacology-count-target_organism
      rdf:type spl:Argument ;
      spl:predicate arg:target_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-target_organism .

OP:compound-chebi-pharmacology-count-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-count-uri .

OP:compound-chebi-pharmacology-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-maxEx_activity_value .

OP:compound-chebi-pharmacology-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-max_activity_value .

OP:compound-chebi-pharmacology-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-minEx_activity_value .

OP:compound-chebi-pharmacology-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-min_activity_value .

OP:compound-chebi-pharmacology-pages
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-chebi-pharmacology-pages-app_ids , OP:compound-chebi-pharmacology-pages-minEx_activity_value , OP:compound-chebi-pharmacology-pages-activity_value , OP:compound-chebi-pharmacology-pages-activity_type , OP:compound-chebi-pharmacology-pages-assay_organism , OP:compound-chebi-pharmacology-pages-maxEx_activity_value , OP:compound-chebi-pharmacology-pages-max_activity_value , OP:compound-chebi-pharmacology-pages-_callback , OP:compound-chebi-pharmacology-pages-min_activity_value , OP:compound-chebi-pharmacology-pages-app_keys , OP:compound-chebi-pharmacology-pages-_page , OP:compound-chebi-pharmacology-pages-_pageSize , OP:compound-chebi-pharmacology-pages-activity_unit , OP:compound-chebi-pharmacology-pages-uri , OP:compound-chebi-pharmacology-pages-target_organism ;
      sm:returnModule OP:Return-compound-chebi-pharmacology-pages .

OP:compound-chebi-pharmacology-pages-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-_callback .

OP:compound-chebi-pharmacology-pages-_page
      rdf:type spl:Argument ;
      spl:predicate arg:_page ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-_page .

OP:compound-chebi-pharmacology-pages-_pageSize
      rdf:type spl:Argument ;
      spl:predicate arg:_pageSize ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-_pageSize .

OP:compound-chebi-pharmacology-pages-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-activity_type .

OP:compound-chebi-pharmacology-pages-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-activity_unit .

OP:compound-chebi-pharmacology-pages-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-activity_value .

OP:compound-chebi-pharmacology-pages-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-app_ids .

OP:compound-chebi-pharmacology-pages-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-app_keys .

OP:compound-chebi-pharmacology-pages-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-assay_organism .

OP:compound-chebi-pharmacology-pages-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-maxEx_activity_value .

OP:compound-chebi-pharmacology-pages-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-max_activity_value .

OP:compound-chebi-pharmacology-pages-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-minEx_activity_value .

OP:compound-chebi-pharmacology-pages-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-min_activity_value .

OP:compound-chebi-pharmacology-pages-target_organism
      rdf:type spl:Argument ;
      spl:predicate arg:target_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-target_organism .

OP:compound-chebi-pharmacology-pages-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-pages-uri .

OP:compound-chebi-pharmacology-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-pharmacology-uri .

OP:compound-chebi-root
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-chebi-root-_callback , OP:compound-chebi-root-app_keys , OP:compound-chebi-root-app_ids ;
      sm:returnModule OP:Return-compound-chebi-root .

OP:compound-chebi-root-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-root-_callback .

OP:compound-chebi-root-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-root-app_ids .

OP:compound-chebi-root-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-chebi-root-app_keys .

OP:compound-pharmacology
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-pharmacology-_callback , OP:compound-pharmacology-maxEx_activity_value , OP:compound-pharmacology-minEx_activity_value , OP:compound-pharmacology-app_keys , OP:compound-pharmacology-activity_value , OP:compound-pharmacology-activity_unit , OP:compound-pharmacology-app_ids , OP:compound-pharmacology-min_activity_value , OP:compound-pharmacology-activity_type , OP:compound-pharmacology-max_activity_value , OP:compound-pharmacology-assay_organism , OP:compound-pharmacology-uri ;
      sm:returnModule OP:Return-compound-pharmacology .

OP:compound-pharmacology-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-_callback .

OP:compound-pharmacology-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-activity_type .

OP:compound-pharmacology-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-activity_unit .

OP:compound-pharmacology-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-activity_value .

OP:compound-pharmacology-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-app_ids .

OP:compound-pharmacology-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-app_keys .

OP:compound-pharmacology-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-assay_organism .

OP:compound-pharmacology-count
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-pharmacology-count-uri , OP:compound-pharmacology-count-_callback , OP:compound-pharmacology-count-target_organism , OP:compound-pharmacology-count-app_keys , OP:compound-pharmacology-count-activity_unit , OP:compound-pharmacology-count-max_activity_value , OP:compound-pharmacology-count-activity_value , OP:compound-pharmacology-count-min_activity_value , OP:compound-pharmacology-count-maxEx_activity_value , OP:compound-pharmacology-count-app_ids , OP:compound-pharmacology-count-minEx_activity_value , OP:compound-pharmacology-count-activity_type , OP:compound-pharmacology-count-assay_organism ;
      sm:returnModule OP:Return-compound-pharmacology-count .

OP:compound-pharmacology-count-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-_callback .

OP:compound-pharmacology-count-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-activity_type .

OP:compound-pharmacology-count-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-activity_unit .

OP:compound-pharmacology-count-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-activity_value .

OP:compound-pharmacology-count-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-app_ids .

OP:compound-pharmacology-count-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-app_keys .

OP:compound-pharmacology-count-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-assay_organism .

OP:compound-pharmacology-count-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-maxEx_activity_value .

OP:compound-pharmacology-count-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-max_activity_value .

OP:compound-pharmacology-count-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-minEx_activity_value .

OP:compound-pharmacology-count-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-min_activity_value .

OP:compound-pharmacology-count-target_organism
      rdf:type spl:Argument ;
      spl:predicate arg:target_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-target_organism .

OP:compound-pharmacology-count-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-count-uri .

OP:compound-pharmacology-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-maxEx_activity_value .

OP:compound-pharmacology-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-max_activity_value .

OP:compound-pharmacology-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-minEx_activity_value .

OP:compound-pharmacology-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-min_activity_value .

OP:compound-pharmacology-pages
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:compound-pharmacology-pages-activity_unit , OP:compound-pharmacology-pages-_callback , OP:compound-pharmacology-pages-activity_type , OP:compound-pharmacology-pages-min_activity_value , OP:compound-pharmacology-pages-uri , OP:compound-pharmacology-pages-target_organism , OP:compound-pharmacology-pages-app_ids , OP:compound-pharmacology-pages-assay_organism , OP:compound-pharmacology-pages-_pageSize , OP:compound-pharmacology-pages-minEx_activity_value , OP:compound-pharmacology-pages-maxEx_activity_value , OP:compound-pharmacology-pages-activity_value , OP:compound-pharmacology-pages-app_keys , OP:compound-pharmacology-pages-_page , OP:compound-pharmacology-pages-max_activity_value ;
      sm:returnModule OP:Return-compound-pharmacology-pages .

OP:compound-pharmacology-pages-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-_callback .

OP:compound-pharmacology-pages-_page
      rdf:type spl:Argument ;
      spl:predicate arg:_page ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-_page .

OP:compound-pharmacology-pages-_pageSize
      rdf:type spl:Argument ;
      spl:predicate arg:_pageSize ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-_pageSize .

OP:compound-pharmacology-pages-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-activity_type .

OP:compound-pharmacology-pages-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-activity_unit .

OP:compound-pharmacology-pages-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-activity_value .

OP:compound-pharmacology-pages-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-app_ids .

OP:compound-pharmacology-pages-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-app_keys .

OP:compound-pharmacology-pages-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-assay_organism .

OP:compound-pharmacology-pages-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-maxEx_activity_value .

OP:compound-pharmacology-pages-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-max_activity_value .

OP:compound-pharmacology-pages-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-minEx_activity_value .

OP:compound-pharmacology-pages-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-min_activity_value .

OP:compound-pharmacology-pages-target_organism
      rdf:type spl:Argument ;
      spl:predicate arg:target_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-target_organism .

OP:compound-pharmacology-pages-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-pages-uri .

OP:compound-pharmacology-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-pharmacology-uri .

OP:compound-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-compound-uri .

OP:getConceptDescription
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:getConceptDescription-uuid , OP:getConceptDescription-branch , OP:getConceptDescription-_callback , OP:getConceptDescription-app_ids , OP:getConceptDescription-app_keys ;
      sm:returnModule OP:Return-getConceptDescription .

OP:getConceptDescription-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-getConceptDescription-_callback .

OP:getConceptDescription-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-getConceptDescription-app_ids .

OP:getConceptDescription-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-getConceptDescription-app_keys .

OP:getConceptDescription-branch
      rdf:type spl:Argument ;
      spl:predicate arg:branch ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-getConceptDescription-branch .

OP:getConceptDescription-uuid
      rdf:type spl:Argument ;
      spl:predicate arg:uuid ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-getConceptDescription-uuid .

OP:mapURL
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:mapURL-_callback , OP:mapURL-app_ids , OP:mapURL-URL , OP:mapURL-app_keys , OP:mapURL-targetURISpace ;
      sm:returnModule OP:Return-mapURL .

OP:mapURL-URL
      rdf:type spl:Argument ;
      spl:predicate arg:URL ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-mapURL-URL .

OP:mapURL-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-mapURL-_callback .

OP:mapURL-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-mapURL-app_ids .

OP:mapURL-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-mapURL-app_keys .

OP:mapURL-targetURISpace
      rdf:type spl:Argument ;
      spl:predicate arg:targetURISpace ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-mapURL-targetURISpace .

OP:pathway
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:pathway-_callback , OP:pathway-app_keys , OP:pathway-uri , OP:pathway-app_ids ;
      sm:returnModule OP:Return-pathway .

OP:pathway-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pathway-_callback .

OP:pathway-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pathway-app_ids .

OP:pathway-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pathway-app_keys .

OP:pathway-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pathway-uri .

OP:pharmacology-filters-activities
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:pharmacology-filters-activities-_callback , OP:pharmacology-filters-activities-app_ids , OP:pharmacology-filters-activities-app_keys ;
      sm:returnModule OP:Return-pharmacology-filters-activities .

OP:pharmacology-filters-activities-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pharmacology-filters-activities-_callback .

OP:pharmacology-filters-activities-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pharmacology-filters-activities-app_ids .

OP:pharmacology-filters-activities-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pharmacology-filters-activities-app_keys .

OP:pharmacology-filters-units-act_type
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:pharmacology-filters-units-act_type-act_type , OP:pharmacology-filters-units-act_type-_callback , OP:pharmacology-filters-units-act_type-app_ids , OP:pharmacology-filters-units-act_type-app_keys ;
      sm:returnModule OP:Return-pharmacology-filters-units-act_type .

OP:pharmacology-filters-units-act_type-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pharmacology-filters-units-act_type-_callback .

OP:pharmacology-filters-units-act_type-act_type
      rdf:type spl:Argument ;
      spl:predicate arg:act_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pharmacology-filters-units-act_type-act_type .

OP:pharmacology-filters-units-act_type-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pharmacology-filters-units-act_type-app_ids .

OP:pharmacology-filters-units-act_type-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-pharmacology-filters-units-act_type-app_keys .

OP:search-byTag
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:search-byTag-limit , OP:search-byTag-app_ids , OP:search-byTag-app_keys , OP:search-byTag-q , OP:search-byTag-_callback , OP:search-byTag-branch , OP:search-byTag-uuid ;
      sm:returnModule OP:Return-search-byTag .

OP:search-byTag-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-byTag-_callback .

OP:search-byTag-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-byTag-app_ids .

OP:search-byTag-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-byTag-app_keys .

OP:search-byTag-branch
      rdf:type spl:Argument ;
      spl:predicate arg:branch ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-byTag-branch .

OP:search-byTag-limit
      rdf:type spl:Argument ;
      spl:predicate arg:limit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-byTag-limit .

OP:search-byTag-q
      rdf:type spl:Argument ;
      spl:predicate arg:q ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-byTag-q .

OP:search-byTag-uuid
      rdf:type spl:Argument ;
      spl:predicate arg:uuid ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-byTag-uuid .

OP:search-freetext
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:search-freetext-limit , OP:search-freetext-_callback , OP:search-freetext-q , OP:search-freetext-app_ids , OP:search-freetext-app_keys , OP:search-freetext-branch ;
      sm:returnModule OP:Return-search-freetext .

OP:search-freetext-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-freetext-_callback .

OP:search-freetext-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-freetext-app_ids .

OP:search-freetext-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-freetext-app_keys .

OP:search-freetext-branch
      rdf:type spl:Argument ;
      spl:predicate arg:branch ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-freetext-branch .

OP:search-freetext-limit
      rdf:type spl:Argument ;
      spl:predicate arg:limit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-freetext-limit .

OP:search-freetext-q
      rdf:type spl:Argument ;
      spl:predicate arg:q ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-search-freetext-q .

OP:sources
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:sources-_callback , OP:sources-app_keys , OP:sources-app_ids ;
      sm:returnModule OP:Return-sources .

OP:sources-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-sources-_callback .

OP:sources-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-sources-app_ids .

OP:sources-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-sources-app_keys .

OP:structure
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:structure-_callback , OP:structure-smiles , OP:structure-app_ids , OP:structure-app_keys , OP:structure-inchi , OP:structure-inchi_key ;
      sm:returnModule OP:Return-structure .

OP:structure-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-_callback .

OP:structure-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-app_ids .

OP:structure-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-app_keys .

OP:structure-exact
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-commonOptions.Complexity> , OP:structure-exact-app_ids , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-resultOptions.Start> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-commonOptions.HasPatents> , OP:structure-exact-_callback , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-commonOptions.HasSpectra> , OP:structure-exact-app_keys , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-resultOptions.Limit> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-searchOptions.MatchType> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-commonOptions.Isotopic> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-resultOptions.Length> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-searchOptions.Molecule> ;
      sm:returnModule OP:Return-structure-exact .

OP:structure-exact-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-exact-_callback .

OP:structure-exact-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-exact-app_ids .

OP:structure-exact-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-exact-app_keys .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-commonOptions.Complexity>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.Complexity> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-commonOptions.Complexity> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-commonOptions.HasPatents>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.HasPatents> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-commonOptions.HasPatents> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-commonOptions.HasSpectra>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.HasSpectra> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-commonOptions.HasSpectra> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-commonOptions.Isotopic>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.Isotopic> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-commonOptions.Isotopic> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-resultOptions.Length>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Length> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-resultOptions.Length> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-resultOptions.Limit>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Limit> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-resultOptions.Limit> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-resultOptions.Start>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Start> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-resultOptions.Start> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-searchOptions.MatchType>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#searchOptions.MatchType> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-searchOptions.MatchType> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-exact-searchOptions.Molecule>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#searchOptions.Molecule> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-exact-searchOptions.Molecule> .

OP:structure-inchi
      rdf:type spl:Argument ;
      spl:predicate arg:inchi ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-inchi .

OP:structure-inchi_key
      rdf:type spl:Argument ;
      spl:predicate arg:inchi_key ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-inchi_key .

OP:structure-similarity
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-resultOptions.Length> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-resultOptions.Start> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-searchOptions.SimilarityType> , OP:structure-similarity-_callback , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-commonOptions.HasPatents> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-searchOptions.Threshold> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-resultOptions.Limit> , OP:structure-similarity-app_ids , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-commonOptions.HasSpectra> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-commonOptions.Isotopic> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-commonOptions.Complexity> , OP:structure-similarity-app_keys , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-searchOptions.Molecule> ;
      sm:returnModule OP:Return-structure-similarity .

OP:structure-similarity-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-similarity-_callback .

OP:structure-similarity-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-similarity-app_ids .

OP:structure-similarity-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-similarity-app_keys .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-commonOptions.Complexity>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.Complexity> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-commonOptions.Complexity> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-commonOptions.HasPatents>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.HasPatents> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-commonOptions.HasPatents> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-commonOptions.HasSpectra>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.HasSpectra> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-commonOptions.HasSpectra> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-commonOptions.Isotopic>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.Isotopic> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-commonOptions.Isotopic> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-resultOptions.Length>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Length> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-resultOptions.Length> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-resultOptions.Limit>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Limit> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-resultOptions.Limit> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-resultOptions.Start>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Start> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-resultOptions.Start> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-searchOptions.Molecule>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#searchOptions.Molecule> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-searchOptions.Molecule> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-searchOptions.SimilarityType>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#searchOptions.SimilarityType> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-searchOptions.SimilarityType> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-similarity-searchOptions.Threshold>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#searchOptions.Threshold> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-similarity-searchOptions.Threshold> .

OP:structure-smiles
      rdf:type spl:Argument ;
      spl:predicate arg:smiles ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-smiles .

OP:structure-substructure
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-commonOptions.Isotopic> , OP:structure-substructure-_callback , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-commonOptions.HasPatents> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-searchOptions.MatchTautomers> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-resultOptions.Length> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-commonOptions.Complexity> , OP:structure-substructure-app_ids , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-resultOptions.Start> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-searchOptions.Molecule> , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-commonOptions.HasSpectra> , OP:structure-substructure-app_keys , <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-resultOptions.Limit> ;
      sm:returnModule OP:Return-structure-substructure .

OP:structure-substructure-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-substructure-_callback .

OP:structure-substructure-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-substructure-app_ids .

OP:structure-substructure-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-structure-substructure-app_keys .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-commonOptions.Complexity>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.Complexity> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-commonOptions.Complexity> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-commonOptions.HasPatents>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.HasPatents> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-commonOptions.HasPatents> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-commonOptions.HasSpectra>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.HasSpectra> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-commonOptions.HasSpectra> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-commonOptions.Isotopic>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#commonOptions.Isotopic> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-commonOptions.Isotopic> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-resultOptions.Length>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Length> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-resultOptions.Length> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-resultOptions.Limit>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Limit> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-resultOptions.Limit> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-resultOptions.Start>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#resultOptions.Start> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-resultOptions.Start> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-searchOptions.MatchTautomers>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#searchOptions.MatchTautomers> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-searchOptions.MatchTautomers> .

<http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#structure-substructure-searchOptions.Molecule>
      rdf:type spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#searchOptions.Molecule> ;
      spl:valueType xsd:string ;
      sm:next <http://www.workingontologist.org/OpenPHACTS/scripts/OpenPHACTS#Bind-structure-substructure-searchOptions.Molecule> .

OP:target
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-_callback , OP:target-app_ids , OP:target-uri , OP:target-app_keys ;
      sm:returnModule OP:Return-target .

OP:target-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-_callback .

OP:target-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-app_ids .

OP:target-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-app_keys .

OP:target-enzyme-members
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-enzyme-members-_callback , OP:target-enzyme-members-uri , OP:target-enzyme-members-app_ids , OP:target-enzyme-members-app_keys ;
      sm:returnModule OP:Return-target-enzyme-members .

OP:target-enzyme-members-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-members-_callback .

OP:target-enzyme-members-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-members-app_ids .

OP:target-enzyme-members-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-members-app_keys .

OP:target-enzyme-members-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-members-uri .

OP:target-enzyme-node
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-enzyme-node-_callback , OP:target-enzyme-node-app_ids , OP:target-enzyme-node-uri , OP:target-enzyme-node-app_keys ;
      sm:returnModule OP:Return-target-enzyme-node .

OP:target-enzyme-node-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-node-_callback .

OP:target-enzyme-node-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-node-app_ids .

OP:target-enzyme-node-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-node-app_keys .

OP:target-enzyme-node-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-node-uri .

OP:target-enzyme-pharmacology
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-enzyme-pharmacology-_callback , OP:target-enzyme-pharmacology-min_activity_value , OP:target-enzyme-pharmacology-activity_value , OP:target-enzyme-pharmacology-minEx_activity_value , OP:target-enzyme-pharmacology-max_activity_value , OP:target-enzyme-pharmacology-app_keys , OP:target-enzyme-pharmacology-activity_unit , OP:target-enzyme-pharmacology-maxEx_activity_value , OP:target-enzyme-pharmacology-uri , OP:target-enzyme-pharmacology-assay_organism , OP:target-enzyme-pharmacology-activity_type , OP:target-enzyme-pharmacology-app_ids ;
      sm:returnModule OP:Return-target-enzyme-pharmacology .

OP:target-enzyme-pharmacology-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-_callback .

OP:target-enzyme-pharmacology-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-activity_type .

OP:target-enzyme-pharmacology-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-activity_unit .

OP:target-enzyme-pharmacology-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-activity_value .

OP:target-enzyme-pharmacology-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-app_ids .

OP:target-enzyme-pharmacology-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-app_keys .

OP:target-enzyme-pharmacology-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-assay_organism .

OP:target-enzyme-pharmacology-count
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-enzyme-pharmacology-count-app_ids , OP:target-enzyme-pharmacology-count-activity_value , OP:target-enzyme-pharmacology-count-_callback , OP:target-enzyme-pharmacology-count-maxEx_activity_value , OP:target-enzyme-pharmacology-count-assay_organism , OP:target-enzyme-pharmacology-count-minEx_activity_value , OP:target-enzyme-pharmacology-count-max_activity_value , OP:target-enzyme-pharmacology-count-app_keys , OP:target-enzyme-pharmacology-count-activity_unit , OP:target-enzyme-pharmacology-count-uri , OP:target-enzyme-pharmacology-count-target_organism , OP:target-enzyme-pharmacology-count-min_activity_value , OP:target-enzyme-pharmacology-count-activity_type ;
      sm:returnModule OP:Return-target-enzyme-pharmacology-count .

OP:target-enzyme-pharmacology-count-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-_callback .

OP:target-enzyme-pharmacology-count-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-activity_type .

OP:target-enzyme-pharmacology-count-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-activity_unit .

OP:target-enzyme-pharmacology-count-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-activity_value .

OP:target-enzyme-pharmacology-count-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-app_ids .

OP:target-enzyme-pharmacology-count-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-app_keys .

OP:target-enzyme-pharmacology-count-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-assay_organism .

OP:target-enzyme-pharmacology-count-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-maxEx_activity_value .

OP:target-enzyme-pharmacology-count-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-max_activity_value .

OP:target-enzyme-pharmacology-count-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-minEx_activity_value .

OP:target-enzyme-pharmacology-count-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-min_activity_value .

OP:target-enzyme-pharmacology-count-target_organism
      rdf:type spl:Argument ;
      spl:predicate arg:target_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-target_organism .

OP:target-enzyme-pharmacology-count-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-count-uri .

OP:target-enzyme-pharmacology-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-maxEx_activity_value .

OP:target-enzyme-pharmacology-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-max_activity_value .

OP:target-enzyme-pharmacology-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-minEx_activity_value .

OP:target-enzyme-pharmacology-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-min_activity_value .

OP:target-enzyme-pharmacology-pages
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-enzyme-pharmacology-pages-activity_value , OP:target-enzyme-pharmacology-pages-_pageSize , OP:target-enzyme-pharmacology-pages-_page , OP:target-enzyme-pharmacology-pages-app_ids , OP:target-enzyme-pharmacology-pages-activity_type , OP:target-enzyme-pharmacology-pages-minEx_activity_value , OP:target-enzyme-pharmacology-pages-target_organism , OP:target-enzyme-pharmacology-pages-app_keys , OP:target-enzyme-pharmacology-pages-max_activity_value , OP:target-enzyme-pharmacology-pages-maxEx_activity_value , OP:target-enzyme-pharmacology-pages-uri , OP:target-enzyme-pharmacology-pages-activity_unit , OP:target-enzyme-pharmacology-pages-min_activity_value , OP:target-enzyme-pharmacology-pages-assay_organism , OP:target-enzyme-pharmacology-pages-_callback ;
      sm:returnModule OP:Return-target-enzyme-pharmacology-pages .

OP:target-enzyme-pharmacology-pages-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-_callback .

OP:target-enzyme-pharmacology-pages-_page
      rdf:type spl:Argument ;
      spl:predicate arg:_page ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-_page .

OP:target-enzyme-pharmacology-pages-_pageSize
      rdf:type spl:Argument ;
      spl:predicate arg:_pageSize ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-_pageSize .

OP:target-enzyme-pharmacology-pages-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-activity_type .

OP:target-enzyme-pharmacology-pages-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-activity_unit .

OP:target-enzyme-pharmacology-pages-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-activity_value .

OP:target-enzyme-pharmacology-pages-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-app_ids .

OP:target-enzyme-pharmacology-pages-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-app_keys .

OP:target-enzyme-pharmacology-pages-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-assay_organism .

OP:target-enzyme-pharmacology-pages-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-maxEx_activity_value .

OP:target-enzyme-pharmacology-pages-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-max_activity_value .

OP:target-enzyme-pharmacology-pages-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-minEx_activity_value .

OP:target-enzyme-pharmacology-pages-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-min_activity_value .

OP:target-enzyme-pharmacology-pages-target_organism
      rdf:type spl:Argument ;
      spl:predicate arg:target_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-target_organism .

OP:target-enzyme-pharmacology-pages-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-pages-uri .

OP:target-enzyme-pharmacology-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-pharmacology-uri .

OP:target-enzyme-root
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-enzyme-root-_callback , OP:target-enzyme-root-app_ids , OP:target-enzyme-root-app_keys ;
      sm:returnModule OP:Return-target-enzyme-root .

OP:target-enzyme-root-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-root-_callback .

OP:target-enzyme-root-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-root-app_ids .

OP:target-enzyme-root-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-enzyme-root-app_keys .

OP:target-pharmacology
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-pharmacology-activity_value , OP:target-pharmacology-min_activity_value , OP:target-pharmacology-activity_type , OP:target-pharmacology-_callback , OP:target-pharmacology-app_keys , OP:target-pharmacology-minEx_activity_value , OP:target-pharmacology-uri , OP:target-pharmacology-activity_unit , OP:target-pharmacology-app_ids , OP:target-pharmacology-maxEx_activity_value , OP:target-pharmacology-assay_organism , OP:target-pharmacology-max_activity_value ;
      sm:returnModule OP:Return-target-pharmacology .

OP:target-pharmacology-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-_callback .

OP:target-pharmacology-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-activity_type .

OP:target-pharmacology-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-activity_unit .

OP:target-pharmacology-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-activity_value .

OP:target-pharmacology-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-app_ids .

OP:target-pharmacology-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-app_keys .

OP:target-pharmacology-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-assay_organism .

OP:target-pharmacology-count
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-pharmacology-count-target_organism , OP:target-pharmacology-count-maxEx_activity_value , OP:target-pharmacology-count-_callback , OP:target-pharmacology-count-activity_value , OP:target-pharmacology-count-min_activity_value , OP:target-pharmacology-count-uri , OP:target-pharmacology-count-activity_unit , OP:target-pharmacology-count-activity_type , OP:target-pharmacology-count-minEx_activity_value , OP:target-pharmacology-count-max_activity_value , OP:target-pharmacology-count-assay_organism , OP:target-pharmacology-count-app_keys , OP:target-pharmacology-count-app_ids ;
      sm:returnModule OP:Return-target-pharmacology-count .

OP:target-pharmacology-count-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-_callback .

OP:target-pharmacology-count-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-activity_type .

OP:target-pharmacology-count-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-activity_unit .

OP:target-pharmacology-count-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-activity_value .

OP:target-pharmacology-count-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-app_ids .

OP:target-pharmacology-count-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-app_keys .

OP:target-pharmacology-count-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-assay_organism .

OP:target-pharmacology-count-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-maxEx_activity_value .

OP:target-pharmacology-count-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-max_activity_value .

OP:target-pharmacology-count-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-minEx_activity_value .

OP:target-pharmacology-count-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-min_activity_value .

OP:target-pharmacology-count-target_organism
      rdf:type spl:Argument ;
      spl:predicate arg:target_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-target_organism .

OP:target-pharmacology-count-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-count-uri .

OP:target-pharmacology-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-maxEx_activity_value .

OP:target-pharmacology-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-max_activity_value .

OP:target-pharmacology-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-minEx_activity_value .

OP:target-pharmacology-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-min_activity_value .

OP:target-pharmacology-pages
      rdf:type sm:Function ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint OP:target-pharmacology-pages-_page , OP:target-pharmacology-pages-min_activity_value , OP:target-pharmacology-pages-app_ids , OP:target-pharmacology-pages-activity_value , OP:target-pharmacology-pages-maxEx_activity_value , OP:target-pharmacology-pages-target_organism , OP:target-pharmacology-pages-uri , OP:target-pharmacology-pages-minEx_activity_value , OP:target-pharmacology-pages-activity_unit , OP:target-pharmacology-pages-assay_organism , OP:target-pharmacology-pages-activity_type , OP:target-pharmacology-pages-_pageSize , OP:target-pharmacology-pages-_callback , OP:target-pharmacology-pages-max_activity_value , OP:target-pharmacology-pages-app_keys ;
      sm:returnModule OP:Return-target-pharmacology-pages .

OP:target-pharmacology-pages-_callback
      rdf:type spl:Argument ;
      spl:predicate arg:_callback ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-_callback .

OP:target-pharmacology-pages-_page
      rdf:type spl:Argument ;
      spl:predicate arg:_page ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-_page .

OP:target-pharmacology-pages-_pageSize
      rdf:type spl:Argument ;
      spl:predicate arg:_pageSize ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-_pageSize .

OP:target-pharmacology-pages-activity_type
      rdf:type spl:Argument ;
      spl:predicate arg:activity_type ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-activity_type .

OP:target-pharmacology-pages-activity_unit
      rdf:type spl:Argument ;
      spl:predicate arg:activity_unit ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-activity_unit .

OP:target-pharmacology-pages-activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-activity_value .

OP:target-pharmacology-pages-app_ids
      rdf:type spl:Argument ;
      spl:predicate arg:app_ids ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-app_ids .

OP:target-pharmacology-pages-app_keys
      rdf:type spl:Argument ;
      spl:predicate arg:app_keys ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-app_keys .

OP:target-pharmacology-pages-assay_organism
      rdf:type spl:Argument ;
      spl:predicate arg:assay_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-assay_organism .

OP:target-pharmacology-pages-maxEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:maxEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-maxEx_activity_value .

OP:target-pharmacology-pages-max_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:max_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-max_activity_value .

OP:target-pharmacology-pages-minEx_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:minEx_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-minEx_activity_value .

OP:target-pharmacology-pages-min_activity_value
      rdf:type spl:Argument ;
      spl:predicate arg:min_activity_value ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-min_activity_value .

OP:target-pharmacology-pages-target_organism
      rdf:type spl:Argument ;
      spl:predicate arg:target_organism ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-target_organism .

OP:target-pharmacology-pages-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-pages-uri .

OP:target-pharmacology-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      sm:next OP:Bind-target-pharmacology-uri .

OP:target-uri
      rdf:type spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:anyURI ;
      sm:next OP:Bind-target-uri .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "app_idsarg"
                ]) ;
      sp:where ([ rdf:type sp:Bind ;
                  sp:expression
                          [ rdf:type smf:if ;
                            sp:arg1 [ rdf:type sp:bound ;
                                      sp:arg1 [ sp:varName "app_ids"
                                              ]
                                    ] ;
                            sp:arg2 [ rdf:type smf:buildString ;
                                      sp:arg1 "app_ids={?1}" ;
                                      sp:arg2 [ rdf:type smf:encodeURL ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ]
                                    ] ;
                            sp:arg3 ""
                          ] ;
                  sp:variable
                          [ sp:varName "app_idsarg"
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "_callbackarg"
                ]) ;
      sp:where ([ rdf:type sp:Bind ;
                  sp:expression
                          [ rdf:type smf:if ;
                            sp:arg1 [ rdf:type sp:bound ;
                                      sp:arg1 [ sp:varName "_callback"
                                              ]
                                    ] ;
                            sp:arg2 [ rdf:type smf:buildString ;
                                      sp:arg1 "_callback={?1}" ;
                                      sp:arg2 [ rdf:type smf:encodeURL ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ]
                                    ] ;
                            sp:arg3 ""
                          ] ;
                  sp:variable
                          [ sp:varName "_callbackarg"
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "app_keysarg"
                ]) ;
      sp:where ([ rdf:type sp:Bind ;
                  sp:expression
                          [ rdf:type smf:if ;
                            sp:arg1 [ rdf:type sp:bound ;
                                      sp:arg1 [ sp:varName "app_keys"
                                              ]
                                    ] ;
                            sp:arg2 [ rdf:type smf:buildString ;
                                      sp:arg1 "app_keys={?1}" ;
                                      sp:arg2 [ rdf:type smf:encodeURL ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ]
                                    ] ;
                            sp:arg3 ""
                          ] ;
                  sp:variable
                          [ sp:varName "app_keysarg"
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "_callbackarg"
                ]) ;
      sp:where ([ rdf:type sp:Bind ;
                  sp:expression
                          [ rdf:type smf:if ;
                            sp:arg1 [ rdf:type sp:bound ;
                                      sp:arg1 [ sp:varName "_callback"
                                              ]
                                    ] ;
                            sp:arg2 [ rdf:type smf:buildString ;
                                      sp:arg1 "_callback={?1}" ;
                                      sp:arg2 [ rdf:type smf:encodeURL ;
                                                sp:arg1 [ sp:varName "_callback"
                                                        ]
                                              ]
                                    ] ;
                            sp:arg3 ""
                          ] ;
                  sp:variable
                          [ sp:varName "_callbackarg"
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "app_keysarg"
                ]) ;
      sp:where ([ rdf:type sp:Bind ;
                  sp:expression
                          [ rdf:type smf:if ;
                            sp:arg1 [ rdf:type sp:bound ;
                                      sp:arg1 [ sp:varName "app_keys"
                                              ]
                                    ] ;
                            sp:arg2 [ rdf:type smf:buildString ;
                                      sp:arg1 "app_keys={?1}" ;
                                      sp:arg2 [ rdf:type smf:encodeURL ;
                                                sp:arg1 [ sp:varName "app_keys"
                                                        ]
                                              ]
                                    ] ;
                            sp:arg3 ""
                          ] ;
                  sp:variable
                          [ sp:varName "app_keysarg"
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "app_idsarg"
                ]) ;
      sp:where ([ rdf:type sp:Bind ;
                  sp:expression
                          [ rdf:type smf:if ;
                            sp:arg1 [ rdf:type sp:bound ;
                                      sp:arg1 [ sp:varName "app_ids"
                                              ]
                                    ] ;
                            sp:arg2 [ rdf:type smf:buildString ;
                                      sp:arg1 "app_ids={?1}" ;
                                      sp:arg2 [ rdf:type smf:encodeURL ;
                                                sp:arg1 [ sp:varName "app_ids"
                                                        ]
                                              ]
                                    ] ;
                            sp:arg3 ""
                          ] ;
                  sp:variable
                          [ sp:varName "app_idsarg"
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .

[]    rdf:type sp:Select ;
      sp:resultVariables ([ sp:varName "id"^^xsd:string
                ] [ sp:varName "key"^^xsd:string
                ]) ;
      sp:where ([ sp:object
                          [ sp:varName "id"^^xsd:string
                          ] ;
                  sp:predicate keymodel:id ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "key"^^xsd:string
                          ] ;
                  sp:predicate keymodel:key ;
                  sp:subject
                          [ sp:varName "?0"^^xsd:string
                          ]
                ]) .
